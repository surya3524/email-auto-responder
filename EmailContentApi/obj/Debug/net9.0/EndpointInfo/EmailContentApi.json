{
  "openapi": "3.0.4",
  "info": {
    "title": "Email Content API",
    "description": "A .NET 8 Web API for managing email content with AWS database integration",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/EmailContent": {
      "get": {
        "tags": [
          "EmailContent"
        ],
        "summary": "Retrieves all email contents from the database",
        "responses": {
          "200": {
            "description": "Returns the list of email contents",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailContentResponseDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailContentResponseDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailContentResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "If there was an internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "EmailContent"
        ],
        "summary": "Creates a new email content entry",
        "requestBody": {
          "description": "The email content data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailContentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailContentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailContentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created email content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmailContentResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailContentResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailContentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "If the content is null or empty",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If there was an internal server error"
          }
        }
      }
    },
    "/api/EmailContent/{id}": {
      "get": {
        "tags": [
          "EmailContent"
        ],
        "summary": "Retrieves a specific email content by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the email content to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested email content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmailContentResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailContentResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailContentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "If the email content with the specified ID was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EmailContent"
        ],
        "summary": "Updates an existing email content entry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the email content to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated email content data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailContentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailContentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailContentDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "If the email content was successfully updated"
          },
          "400": {
            "description": "If the content is null or empty",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the email content with the specified ID was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmailContent"
        ],
        "summary": "Deletes an email content entry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the email content to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "If the email content was successfully deleted"
          },
          "404": {
            "description": "If the email content with the specified ID was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/EmailContent/seed": {
      "post": {
        "tags": [
          "EmailContent"
        ],
        "summary": "Manually triggers data seeding (for testing purposes)",
        "responses": {
          "200": {
            "description": "If seeding was successful"
          },
          "500": {
            "description": "If there was an error during seeding"
          }
        }
      }
    },
    "/api/EmailContent/count": {
      "get": {
        "tags": [
          "EmailContent"
        ],
        "summary": "Gets the count of email contents in the database",
        "responses": {
          "200": {
            "description": "Returns the count"
          }
        }
      }
    },
    "/api/EnronEmail/insert-enron-emails": {
      "post": {
        "tags": [
          "EnronEmail"
        ],
        "summary": "Fetches and inserts related emails from Enron dataset",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/EnronEmail/insert-1000-enron-emails": {
      "post": {
        "tags": [
          "EnronEmail"
        ],
        "summary": "Fetches and inserts 1000 emails from Enron dataset with API integration",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/EnronEmail/analyze-enron-emails": {
      "get": {
        "tags": [
          "EnronEmail"
        ],
        "summary": "Analyzes Enron emails in the database",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/EnronEmail/get-enron-emails": {
      "get": {
        "tags": [
          "EnronEmail"
        ],
        "summary": "Gets all Enron emails from the database",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OpenAI/test": {
      "get": {
        "tags": [
          "OpenAI"
        ],
        "summary": "Test OpenAI API key connectivity",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OpenAI/embed": {
      "post": {
        "tags": [
          "OpenAI"
        ],
        "summary": "Generate embeddings for a single text input",
        "requestBody": {
          "description": "The embedding request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OpenAI/embed-all-emails": {
      "post": {
        "tags": [
          "OpenAI"
        ],
        "summary": "Generate embeddings for all email contents in the database",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/OpenAI/embed-email/{id}": {
      "post": {
        "tags": [
          "OpenAI"
        ],
        "summary": "Generate embeddings for a specific email by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The email ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/PineconeSDK/create-serverless": {
      "post": {
        "tags": [
          "PineconeSDK"
        ],
        "summary": "Creates a serverless Pinecone index",
        "requestBody": {
          "description": "Serverless index creation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerlessIndexRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerlessIndexRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ServerlessIndexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/PineconeSDK/upsert-records": {
      "post": {
        "tags": [
          "PineconeSDK"
        ],
        "summary": "Adds records to an existing Pinecone index",
        "requestBody": {
          "description": "List of records to upsert",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertRecordRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertRecordRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertRecordRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/PineconeSDK/semantic-search": {
      "post": {
        "tags": [
          "PineconeSDK"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/PineconeSDK/augmented-search": {
      "post": {
        "tags": [
          "PineconeSDK"
        ],
        "summary": "Performs semantic search and generates an augmented LLM response",
        "requestBody": {
          "description": "Query request with optional parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AugmentedSearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AugmentedSearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AugmentedSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/PineconeSDK/test-augmented-search": {
      "get": {
        "tags": [
          "PineconeSDK"
        ],
        "summary": "Test endpoint to verify augmented search functionality",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/PineconeSDK/upsert-email-data": {
      "post": {
        "tags": [
          "PineconeSDK"
        ],
        "summary": "Upserts all email content from the database into the Pinecone index",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/PineconeSDK/upsert-email-data-configurable": {
      "post": {
        "tags": [
          "PineconeSDK"
        ],
        "summary": "Upserts email data with configurable chunk size",
        "requestBody": {
          "description": "Upsert request with chunk size configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertEmailDataRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertEmailDataRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertEmailDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/PineconeSDK/chunk-size-analysis": {
      "get": {
        "tags": [
          "PineconeSDK"
        ],
        "summary": "Demonstrates the impact of different chunk sizes",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/PineconeSDK/token-analysis": {
      "get": {
        "tags": [
          "PineconeSDK"
        ],
        "summary": "Demonstrates tokenization and explains token limits",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/PineconeSDK/email-relationship-analysis": {
      "get": {
        "tags": [
          "PineconeSDK"
        ],
        "summary": "Analyzes email database to identify related emails and threads",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AugmentedSearchRequest": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "nullable": true
          },
          "topK": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "scoreThreshold": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxPassages": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "includePrompt": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateEmailContentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailContentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EmbeddingRequest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ServerlessIndexRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "dimension": {
            "type": "integer",
            "format": "int32"
          },
          "metric": {
            "type": "string",
            "nullable": true
          },
          "spec": {
            "$ref": "#/components/schemas/ServerlessIndexSpec"
          },
          "deletionProtection": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServerlessIndexSpec": {
        "type": "object",
        "properties": {
          "serverless": {
            "$ref": "#/components/schemas/ServerlessSpec"
          }
        },
        "additionalProperties": false
      },
      "ServerlessSpec": {
        "type": "object",
        "properties": {
          "cloud": {
            "type": "string",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertEmailDataRequest": {
        "type": "object",
        "properties": {
          "chunkSize": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpsertRecordRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "additionalProperties": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}