<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EmailContentApi</name>
    </assembly>
    <members>
        <member name="T:EmailContentApi.Controllers.EmailContentController">
            <summary>
            Controller for managing email content operations
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EmailContentController.GetEmailContents">
            <summary>
            Retrieves all email contents from the database
            </summary>
            <returns>A list of all email contents</returns>
            <response code="200">Returns the list of email contents</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:EmailContentApi.Controllers.EmailContentController.GetEmailContent(System.Int32)">
            <summary>
            Retrieves a specific email content by its ID
            </summary>
            <param name="id">The ID of the email content to retrieve</param>
            <returns>The email content with the specified ID</returns>
            <response code="200">Returns the requested email content</response>
            <response code="404">If the email content with the specified ID was not found</response>
        </member>
        <member name="M:EmailContentApi.Controllers.EmailContentController.CreateEmailContent(EmailContentApi.DTOs.CreateEmailContentDto)">
            <summary>
            Creates a new email content entry
            </summary>
            <param name="createDto">The email content data to create</param>
            <returns>The newly created email content</returns>
            <response code="201">Returns the newly created email content</response>
            <response code="400">If the content is null or empty</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:EmailContentApi.Controllers.EmailContentController.UpdateEmailContent(System.Int32,EmailContentApi.DTOs.CreateEmailContentDto)">
            <summary>
            Updates an existing email content entry
            </summary>
            <param name="id">The ID of the email content to update</param>
            <param name="updateDto">The updated email content data</param>
            <returns>No content on successful update</returns>
            <response code="204">If the email content was successfully updated</response>
            <response code="400">If the content is null or empty</response>
            <response code="404">If the email content with the specified ID was not found</response>
        </member>
        <member name="M:EmailContentApi.Controllers.EmailContentController.DeleteEmailContent(System.Int32)">
            <summary>
            Deletes an email content entry
            </summary>
            <param name="id">The ID of the email content to delete</param>
            <returns>No content on successful deletion</returns>
            <response code="204">If the email content was successfully deleted</response>
            <response code="404">If the email content with the specified ID was not found</response>
        </member>
        <member name="M:EmailContentApi.Controllers.EmailContentController.SeedData">
            <summary>
            Manually triggers data seeding (for testing purposes)
            </summary>
            <returns>Status of the seeding operation</returns>
            <response code="200">If seeding was successful</response>
            <response code="500">If there was an error during seeding</response>
        </member>
        <member name="M:EmailContentApi.Controllers.EmailContentController.GetEmailContentCount">
            <summary>
            Gets the count of email contents in the database
            </summary>
            <returns>The total count of email contents</returns>
            <response code="200">Returns the count</response>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.InsertEnronEmails">
            <summary>
            Fetches and inserts related emails from Enron dataset
            </summary>
            <returns>Status of the Enron email insertion</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.Insert1000EnronEmails">
            <summary>
            Fetches and inserts 1000 emails from Enron dataset with API integration
            </summary>
            <returns>Status of the Enron email insertion with 1000 records</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.AnalyzeEnronEmails">
            <summary>
            Analyzes Enron emails in the database
            </summary>
            <returns>Analysis of Enron email patterns and relationships</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.GetEnronEmails">
            <summary>
            Gets all Enron emails from the database
            </summary>
            <returns>List of Enron emails</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.ParseEnronEmails(System.String)">
            <summary>
            Parses Enron email format
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.GenerateEnronStyleEmails">
            <summary>
            Generates realistic Enron-style emails when external data is unavailable
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.AnalyzeEnronEmailTypes(System.Collections.Generic.List{EmailContentApi.Models.EmailContent})">
            <summary>
            Analyzes Enron email types and categories
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.AnalyzeEnronSenderRecipientPatterns(System.Collections.Generic.List{EmailContentApi.Models.EmailContent})">
            <summary>
            Analyzes Enron sender and recipient patterns
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.ExtractEnronCommonTopics(System.Collections.Generic.List{EmailContentApi.Models.EmailContent})">
            <summary>
            Extracts common topics from Enron emails
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.FindEnronEmailThreads(System.Collections.Generic.List{EmailContentApi.Models.EmailContent})">
            <summary>
            Finds potential Enron email threads
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.CalculateContentSimilarity(System.String,System.String)">
            <summary>
            Calculates content similarity between two emails
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.ExtractSubject(System.String)">
            <summary>
            Extracts subject line from email content
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.ExtractSender(System.String)">
            <summary>
            Extracts sender from email content
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.ExtractRecipient(System.String)">
            <summary>
            Extracts recipient from email content
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.GenerateEnronStyleEmails(System.Int32)">
            <summary>
            Generates realistic Enron-style emails with count parameter
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.EnronEmailController.GenerateAdditionalEmails(System.Int32,System.Collections.Generic.List{EmailContentApi.Models.EmailContent},System.Random)">
            <summary>
            Generates additional emails based on existing API emails to reach target count
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.OpenAIController.TestOpenAI">
            <summary>
            Test OpenAI API key connectivity
            </summary>
            <returns>API key status and test result</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.OpenAIController.GenerateEmbedding(EmailContentApi.Controllers.EmbeddingRequest)">
            <summary>
            Generate embeddings for a single text input
            </summary>
            <param name="request">The embedding request</param>
            <returns>The embedding vector</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.OpenAIController.GenerateEmbeddingsForAllEmails">
            <summary>
            Generate embeddings for all email contents in the database
            </summary>
            <returns>List of email contents with their embeddings</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.OpenAIController.GenerateEmbeddingForEmail(System.Int32)">
            <summary>
            Generate embeddings for a specific email by ID
            </summary>
            <param name="id">The email ID</param>
            <returns>The email content with its embedding</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.CreateServerlessIndex(EmailContentApi.Controllers.ServerlessIndexRequest)">
            <summary>
            Creates a serverless Pinecone index
            </summary>
            <param name="request">Serverless index creation request</param>
            <returns>Status of the index creation</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.UpsertRecords(System.Collections.Generic.List{EmailContentApi.Controllers.UpsertRecordRequest})">
            <summary>
            Adds records to an existing Pinecone index
            </summary>
            <param name="records">List of records to upsert</param>
            <returns>Status of the upsert operation</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.AugmentedSearch(EmailContentApi.Controllers.AugmentedSearchRequest)">
            <summary>
            Performs semantic search and generates an augmented LLM response
            </summary>
            <param name="request">Query request with optional parameters</param>
            <returns>Generated response based on retrieved context</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.ConstructAugmentedPrompt(System.Collections.Generic.List{Pinecone.Hit},System.String)">
            <summary>
            Constructs an augmented prompt with retrieved context
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.GenerateLLMResponse(System.String,System.String)">
            <summary>
            Generates LLM response using OpenAI API
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.TestAugmentedSearch">
            <summary>
            Test endpoint to verify augmented search functionality
            </summary>
            <returns>Test response</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.UpsertEmailData">
            <summary>
            Upserts all email content from the database into the Pinecone index
            </summary>
            <returns>Status of the upsert operation</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.UpsertEmailDataConfigurable(EmailContentApi.Controllers.UpsertEmailDataRequest)">
            <summary>
            Upserts email data with configurable chunk size
            </summary>
            <param name="request">Upsert request with chunk size configuration</param>
            <returns>Status of the upsert operation</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.SplitIntoChunks(System.String,System.Int32)">
            <summary>
            Splits text into chunks of specified size
            </summary>
            <param name="text">Text to split</param>
            <param name="maxChunkSize">Maximum size of each chunk</param>
            <returns>List of text chunks</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.ChunkSizeAnalysis">
            <summary>
            Demonstrates the impact of different chunk sizes
            </summary>
            <returns>Analysis of different chunk sizes</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.TokenAnalysis">
            <summary>
            Demonstrates tokenization and explains token limits
            </summary>
            <returns>Token analysis and explanation</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.EstimateTokens(System.String)">
            <summary>
            Estimates token count for text (rough approximation)
            </summary>
            <param name="text">Text to estimate tokens for</param>
            <returns>Estimated token count</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.EmailRelationshipAnalysis">
            <summary>
            Analyzes email database to identify related emails and threads
            </summary>
            <returns>Analysis of email relationships and threads</returns>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.AnalyzeEmailTypes(System.Collections.Generic.List{EmailContentApi.Models.EmailContent})">
            <summary>
            Analyzes email types and categories
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.FindPotentialEmailThreads(System.Collections.Generic.List{EmailContentApi.Models.EmailContent})">
            <summary>
            Finds potential email threads based on content similarity
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.ExtractCommonTopics(System.Collections.Generic.List{EmailContentApi.Models.EmailContent})">
            <summary>
            Extracts common topics from email content
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.AnalyzeSenderRecipientPatterns(System.Collections.Generic.List{EmailContentApi.Models.EmailContent})">
            <summary>
            Analyzes sender and recipient patterns
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.CalculateContentSimilarity(System.String,System.String)">
            <summary>
            Calculates content similarity between two emails
            </summary>
        </member>
        <member name="M:EmailContentApi.Controllers.PineconeSDKController.ExtractSubject(System.String)">
            <summary>
            Extracts subject line from email content
            </summary>
        </member>
        <member name="T:EmailContentApi.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:EmailContentApi.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:EmailContentApi.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:EmailContentApi.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
